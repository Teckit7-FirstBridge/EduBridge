/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/roadmap/roadmaps/{roadmapId}/{courseId}/{courseOrder}": {
    /** 로드맵에 강좌 추가 */
    put: operations["addCourse"];
  };
  "/api/v1/roadmap/roadmaps/{id}": {
    /** 로드맵 수정 */
    put: operations["modifyRoadmap"];
    /** 로드맵 삭제 */
    delete: operations["deleteCourse"];
  };
  "/api/v1/roadmap/changeNum/{roadmapId}/{courseId}": {
    /** 로드맵 순서 변경 */
    put: operations["changeRoadmapNum"];
  };
  "/api/v1/posts/{id}": {
    /** 글 상세 정보 */
    get: operations["getDetail"];
    /** 글 수정 */
    put: operations["modify"];
    /** 글 삭제 */
    delete: operations["delete"];
  };
  "/api/v1/notification/read/{id}": {
    put: operations["readNotification"];
  };
  "/api/v1/members/visit": {
    /** 수동 출석체크 */
    put: operations["visit"];
  };
  "/api/v1/members/modifyNickName": {
    /** 회원 닉네임 변경 */
    put: operations["modifyNickName"];
  };
  "/api/v1/members/drop": {
    /** 회원 탈퇴 */
    put: operations["drop"];
  };
  "/api/v1/courses/{videoId}/note/{noteId}": {
    /** 강의 요약 노트 상세 보기 */
    get: operations["getSummaryNote"];
    /** 강의 요약 노트 수정 */
    put: operations["modify_1"];
    /** 강의 요약 노트 삭제 */
    delete: operations["delete_1"];
  };
  "/api/v1/courses/{id}": {
    /** 강좌 수정 */
    put: operations["modifyCourse"];
  };
  "/api/v1/courses/{courseId}/videos/{id}/{writer_id}": {
    /** 강의 수정 */
    put: operations["modifyVideo"];
    /** 강의 삭제 */
    delete: operations["deleteVideo"];
  };
  "/api/v1/courses/{courseId}/startOrStop/{writer_id}": {
    /** 강좌 공개 or 비공개 */
    put: operations["startOrStopCourse"];
  };
  "/api/v1/comments/{postId}/{commentId}": {
    /** 댓글 수정 */
    put: operations["modifyComment"];
    /** 댓글 삭제 */
    delete: operations["deleteComment"];
  };
  "/api/v1/roadmap/roadmaps": {
    /** 로드맵 생성 */
    post: operations["createRoadmap"];
  };
  "/api/v1/report/post/{postId}": {
    /** 글 신고 생성 */
    post: operations["createPostReport"];
  };
  "/api/v1/report/course/{courseId}": {
    /** 강좌 신고 생성 */
    post: operations["createCourseReport"];
  };
  "/api/v1/posts": {
    /** 글 다건 조회 */
    get: operations["getPosts"];
    /** 글 등록 */
    post: operations["createPost"];
  };
  "/api/v1/posts/{id}/like": {
    /** 글 추천 */
    post: operations["vote"];
    /** 글 추천 취소 */
    delete: operations["deleteVote"];
  };
  "/api/v1/posts/qna": {
    /** 1대1 문의 목록 */
    get: operations["getMyQna"];
    /** 1대1 문의 등록 */
    post: operations["createQna"];
  };
  "/api/v1/members/logout": {
    post: operations["logout"];
  };
  "/api/v1/members/login": {
    /** 로그인, accessToken, refreshToken 쿠키 생성됨 */
    post: operations["login"];
  };
  "/api/v1/enroll/{courseId}": {
    /** 수강 등록 */
    post: operations["create"];
  };
  "/api/v1/courses/{videoId}/note": {
    /** 강의 요약 노트 등록 */
    post: operations["create_1"];
  };
  "/api/v1/courses/{id}/like": {
    /** 강좌 좋아요 */
    post: operations["vote_1"];
    /** 강좌 좋아요 취소 */
    delete: operations["deleteVote_1"];
  };
  "/api/v1/courses/{courseId}/videos/{writer_id}": {
    /** 강의 등록 */
    post: operations["createVideo"];
  };
  "/api/v1/courses/write": {
    /** 강좌 등록 */
    post: operations["createCourse"];
  };
  "/api/v1/comments": {
    /** 댓글 등록 */
    post: operations["createComment"];
  };
  "/api/v1/comments/{postId}/{commentId}/like": {
    /** 댓글 추천 */
    post: operations["voteComment"];
    /** 댓글 추천 취소 */
    delete: operations["deleteVoteComment"];
  };
  "/api/v1/posts/{postId}/report": {
    /** 신고하기 */
    patch: operations["report"];
  };
  "/api/v1/admin/posts/{postId}/report": {
    /** 게시물 신고 취소 */
    patch: operations["cancelReport"];
  };
  "/api/v1/roadmap": {
    /** 로드맵 다건 조회 */
    get: operations["getRoadmaps"];
  };
  "/api/v1/roadmap/{roadmapId}": {
    /** 로드맵 아이디로 로드맵 단건 조회 */
    get: operations["getRoadmapById"];
  };
  "/api/v1/roadmap/myRoadmap": {
    /** 내가 등록한 로드맵 다건 조회 */
    get: operations["getMyRoadmaps"];
  };
  "/api/v1/roadmap/byCourse/{courseId}": {
    /** 강좌로 로드맵 목록 조회 */
    get: operations["getRoadmapByCourse"];
  };
  "/api/v1/report/post": {
    /** 글 신고 목록 조회 */
    get: operations["reportedPostList"];
  };
  "/api/v1/report/course": {
    /** 강좌 신고 목록 조회 */
    get: operations["reportedCourseList"];
  };
  "/api/v1/report/all": {
    /** 전체 신고 목록 조회 */
    get: operations["reportedAllList"];
  };
  "/api/v1/posts/qna/{id}": {
    /** 1대1 문의 상세 정보 */
    get: operations["getQnaDetail"];
    /** 1대1 문의 삭제 */
    delete: operations["deleteQna"];
  };
  "/api/v1/posts/myList": {
    /** 내 글 목록 */
    get: operations["getMyPosts"];
  };
  "/api/v1/point/{memberId}": {
    /** 포인트 목록 */
    get: operations["getPoints"];
  };
  "/api/v1/point/attend": {
    /** 출석 체크 목록 */
    get: operations["getAttend"];
  };
  "/api/v1/notification/isAlarm": {
    get: operations["isAlarm"];
  };
  "/api/v1/notification/get": {
    get: operations["getNotification"];
  };
  "/api/v1/members/{uuid}": {
    /** 마이 페이지 데이터 요청 */
    get: operations["myPage"];
  };
  "/api/v1/members/uuid/{uuid}": {
    get: operations["getMember"];
  };
  "/api/v1/members/me": {
    get: operations["getMe"];
  };
  "/api/v1/members/isLogin": {
    /** 로그인 여부 확인 */
    get: operations["isLogin"];
  };
  "/api/v1/members/isAdmin": {
    /** 관리자 여부 확인 */
    get: operations["isAdmin"];
  };
  "/api/v1/home": {
    /** 홈화면 최신 강좌 N개조회 */
    get: operations["getPosts_1"];
  };
  "/api/v1/enroll": {
    /** 수업 목록 조회 */
    get: operations["getEnrollList"];
  };
  "/api/v1/courses": {
    /** 강좌 다건 조회 */
    get: operations["getCourses"];
  };
  "/api/v1/courses/{videoId}/note/admin": {
    /** 비디오별 강의노트 조회(관리자 기능) */
    get: operations["getSummaryNoteAdmin"];
  };
  "/api/v1/courses/{courseId}": {
    /** 강좌 상세 조회 */
    get: operations["getCourse"];
  };
  "/api/v1/courses/{courseId}/videos": {
    /** 강의 리스트 */
    get: operations["getVideos"];
  };
  "/api/v1/courses/{courseId}/videos/{id}": {
    /** 특정 강의 */
    get: operations["getVideos_1"];
  };
  "/api/v1/courses/{courseId}/enroll/{writerId}": {
    /** 강좌별 수강생 목록 */
    get: operations["getEnrollByCourseId"];
  };
  "/api/v1/courses/{courseId}/auth": {
    /** 해당 멤버가 해당 강좌를 수강 중인지 */
    get: operations["getCourseAuth"];
  };
  "/api/v1/courses/summary": {
    /** 작성자별(uuid) 강의 요약노트 조회 */
    get: operations["getSummaryNoteByUUID"];
  };
  "/api/v1/courses/summary/{writerId}": {
    /** 작성자별 강의 요약노트 조회 */
    get: operations["getSummaryNoteByWriter"];
  };
  "/api/v1/courses/summary/{writerId}/{courseId}": {
    /** 작성자별 강좌의 모든 요약노트 목록 조회 */
    get: operations["getSummaryNoteByWriterandCourse"];
  };
  "/api/v1/courses/mycourse": {
    /** 내가 등록한 강좌 조회 */
    get: operations["getMyCourse"];
  };
  "/api/v1/comments/{postId}": {
    /** 댓글 목록 */
    get: operations["getComments"];
  };
  "/api/v1/comments/{postId}/top": {
    /** 추천수 탑2 댓글 */
    get: operations["getTopComments"];
  };
  "/api/v1/comments/myList": {
    /** 내 댓글 목록 */
    get: operations["getComments_1"];
  };
  "/api/v1/admin/summaryNotes": {
    /** 최신 요약노트 */
    get: operations["getSummeryNotes"];
  };
  "/api/v1/admin/summaryNotes/list": {
    /** 요약노트 목록 */
    get: operations["getAllSummeryNotes"];
  };
  "/api/v1/admin/reports": {
    /** 신고 게시물 최신순 */
    get: operations["getReportedPosts"];
  };
  "/api/v1/admin/reports/list": {
    /** 신고 게시물 목록 */
    get: operations["getAllReportedPosts"];
  };
  "/api/v1/admin/qna": {
    /** 최신 문의 */
    get: operations["getQna"];
  };
  "/api/v1/admin/qna/list": {
    /** 1대1 문의 목록 */
    get: operations["getAllQna"];
  };
  "/api/v1/admin/members": {
    /** 회원 최신순 */
    get: operations["getMembers"];
  };
  "/api/v1/admin/members/list": {
    /** 회원 목록 */
    get: operations["getAllMembers"];
  };
  "/api/v1/admin/deviceCheck": {
    get: operations["getDevice"];
  };
  "/api/v1/admin/courses": {
    /** 강좌 최신순 */
    get: operations["getRecentCourses"];
  };
  "/api/v1/roadmap/{roadmapId}/{courseId}": {
    /** 특정 강좌를 어떤 로드맵에서 삭제 by 각 id */
    delete: operations["CourseRoadmapDelete"];
  };
  "/api/v1/roadmap/roadmaps/course/{courseRoadmapId}": {
    /** 특정 강좌를 어떤 로드맵에서 삭제 by courseRoadmap id */
    delete: operations["courseRoadmapDelete"];
  };
  "/api/v1/courses/{id}/{writer_id}": {
    /** 강좌 삭제 */
    delete: operations["deleteCourse_1"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Empty: Record<string, never>;
    RsDataEmpty: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["Empty"];
      fail: boolean;
      success: boolean;
    };
    CreateRoadmapDto: {
      title?: string;
      overView?: string;
      hashtags: string;
    };
    Course: {
      /** Format: int64 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      title?: string;
      notice?: string;
      imgUrl?: string;
      overView?: string;
      /** Format: int32 */
      price?: number;
      confirm?: boolean;
      courseEnrollList?: components["schemas"]["CourseEnroll"][];
      hashtags?: string;
      writer?: components["schemas"]["Member"];
    };
    CourseEnroll: {
      /** Format: int64 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
    };
    CourseRoadmap: {
      /** Format: int64 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      course?: components["schemas"]["Course"];
      /** Format: int32 */
      courseOrder?: number;
    };
    GrantedAuthority: {
      authority?: string;
    };
    Member: {
      /** Format: int64 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      /** Format: int32 */
      registerCount?: number;
      username?: string;
      password?: string;
      nickname?: string;
      /** Format: int32 */
      point?: number;
      report?: boolean;
      refreshToken?: string;
      profileImgUrl?: string;
      visitedToday?: boolean;
      /** Format: int32 */
      dailyGoal?: number;
      /** Format: int32 */
      dailyAchievement?: number;
      uuid?: string;
      courseEnrollList?: components["schemas"]["CourseEnroll"][];
      name?: string;
      authoritiesAsStringList?: string[];
      profileImgUrlOrDefault?: string;
      authorities?: components["schemas"]["GrantedAuthority"][];
    };
    Roadmap: {
      /** Format: int64 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      title?: string;
      overView?: string;
      hashtags?: string;
    };
    RoadmapDto: {
      /** Format: int64 */
      id: number;
      title?: string;
      overView?: string;
      curriculum: components["schemas"]["CourseRoadmap"][];
      hashtags: string;
      owner: components["schemas"]["Member"];
      roadmapList: components["schemas"]["Roadmap"][];
    };
    RsDataRoadmapDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["RoadmapDto"];
      fail: boolean;
      success: boolean;
    };
    NumDto: {
      /** Format: int32 */
      num?: number;
    };
    PostDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: int64 */
      authorId: number;
      authorName: string;
      title: string;
      body: string;
      /** Format: int32 */
      voteCount: number;
      likedByCurrentUser: boolean;
      /** Format: int32 */
      commentCount: number;
      report: boolean;
    };
    RsDataPostDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["PostDto"];
      fail: boolean;
      success: boolean;
    };
    GetNotificationResponseBody: {
      dtoList: components["schemas"]["NotificationDto"][];
    };
    NotificationDto: {
      /** Format: int64 */
      id?: number;
      recipient?: string;
      read?: boolean;
      sender?: string;
      /** @enum {string} */
      type?: "COMMENT" | "POINTS" | "ANSWER";
      post_title?: string;
      /** Format: int64 */
      post_id?: number;
      /** Format: int32 */
      point?: number;
      /** Format: int64 */
      comment_id?: number;
    };
    RsDataGetNotificationResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetNotificationResponseBody"];
      fail: boolean;
      success: boolean;
    };
    NickNameDto: {
      nickName?: string;
    };
    RsDataNickNameDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["NickNameDto"];
      fail: boolean;
      success: boolean;
    };
    CreateSummaryNoteDto: {
      content: string;
    };
    RsDataSummaryNoteDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["SummaryNoteDto"];
      fail: boolean;
      success: boolean;
    };
    SummaryNoteDto: {
      /** Format: int64 */
      id?: number;
      /** Format: date-time */
      createDate?: string;
      member?: components["schemas"]["Member"];
      content?: string;
      /** Format: int64 */
      score?: number;
      /** Format: int64 */
      courseId?: number;
      /** Format: int64 */
      videoId?: number;
      courseName?: string;
      title?: string;
      pass?: boolean;
    };
    CreateCourseDto: {
      title: string;
      notice: string;
      imgUrl: string;
      overView: string;
      hashtags?: string;
    };
    CourseDto: {
      /** Format: int64 */
      id?: number;
      title?: string;
      notice?: string;
      imgUrl?: string;
      overView?: string;
      /** Format: int32 */
      price?: number;
      /** Format: int32 */
      voteCount?: number;
      likedByCurrentUser?: boolean;
      /** Format: int32 */
      videoCount?: number;
      confirm?: boolean;
      /** Format: int32 */
      enrollCount?: number;
      writer?: components["schemas"]["Member"];
      hashtags?: string;
    };
    RsDataCourseDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CourseDto"];
      fail: boolean;
      success: boolean;
    };
    VideoDto: {
      /** Format: int64 */
      id: number;
      url: string;
      overView?: string;
      imgUrl: string;
      /** Format: int64 */
      courseId: number;
      summaryNotes: components["schemas"]["SummaryNoteDto"][];
      keywords: string;
      title: string;
    };
    RsDataVideoDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["VideoDto"];
      fail: boolean;
      success: boolean;
    };
    CreateCommentDto: {
      body: string;
      /** Format: int64 */
      postId?: number;
    };
    CommentDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: int64 */
      authorId: number;
      authorName: string;
      body: string;
      postTitle: string;
      likedByCurrentUser?: boolean;
      /** Format: int64 */
      postId: number;
      /** Format: int32 */
      voteCount?: number;
    };
    RsDataCommentDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CommentDto"];
      fail: boolean;
      success: boolean;
    };
    RsDataCreateRoadmapDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CreateRoadmapDto"];
      fail: boolean;
      success: boolean;
    };
    CreateReportDto: {
      reportReason: string;
      /** Format: int64 */
      materialId: number;
    };
    RsDataCreateReportDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CreateReportDto"];
      fail: boolean;
      success: boolean;
    };
    CreatePostDto: {
      title: string;
      body: string;
    };
    RsDataCreatePostDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CreatePostDto"];
      fail: boolean;
      success: boolean;
    };
    RsDataVoid: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: Record<string, never>;
      fail: boolean;
      success: boolean;
    };
    LoginRequestBody: {
      username: string;
      password: string;
    };
    LoginResponseBody: {
      item: components["schemas"]["MemberDto"];
    };
    MemberDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      name: string;
      username: string;
      profileImgUrl: string;
      authorities: string[];
      visitedToday: boolean;
      /** Format: int32 */
      dailyGoal: number;
      /** Format: int32 */
      dailyAchievement: number;
      /** Format: int32 */
      point?: number;
      /** Format: int32 */
      registerCount?: number;
      uuid?: string;
    };
    RsDataLoginResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["LoginResponseBody"];
      fail: boolean;
      success: boolean;
    };
    CreateVideoDto: {
      url: string;
      overView: string;
      /** Format: int64 */
      courseId?: number;
      imgUrl: string;
      keywords: string;
      title: string;
    };
    RsDataCreateVideoDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CreateVideoDto"];
      fail: boolean;
      success: boolean;
    };
    RsDataCreateCourseDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CreateCourseDto"];
      fail: boolean;
      success: boolean;
    };
    RsDataCreateCommentDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CreateCommentDto"];
      fail: boolean;
      success: boolean;
    };
    GetRoadmapsResponsebody: {
      items: components["schemas"]["RoadmapDto"][];
    };
    RsDataGetRoadmapsResponsebody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetRoadmapsResponsebody"];
      fail: boolean;
      success: boolean;
    };
    RsDataListRoadmapDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["RoadmapDto"][];
      fail: boolean;
      success: boolean;
    };
    GetReportList: {
      itemPage?: components["schemas"]["PageDtoReportDto"];
    };
    PageDtoReportDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["ReportDto"][];
    };
    ReportDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      reportReason: string;
      /** Format: int64 */
      materialId: number;
    };
    RsDataGetReportList: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetReportList"];
      fail: boolean;
      success: boolean;
    };
    GetPostsResponseBody: {
      itemPage: components["schemas"]["PageDtoPostDto"];
    };
    PageDtoPostDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["PostDto"][];
    };
    RsDataGetPostsResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetPostsResponseBody"];
      fail: boolean;
      success: boolean;
    };
    GetQnaResponseBody: {
      itemPage: components["schemas"]["PageDtoQnaDto"];
    };
    PageDtoQnaDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["QnaDto"][];
    };
    QnaDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: int64 */
      authorId: number;
      authorName: string;
      title: string;
      body: string;
      /** Format: int32 */
      commentCount: number;
    };
    RsDataGetQnaResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetQnaResponseBody"];
      fail: boolean;
      success: boolean;
    };
    RsDataQnaDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["QnaDto"];
      fail: boolean;
      success: boolean;
    };
    GetMyPostsResponseBody: {
      itemPage: components["schemas"]["PageDtoPostDto"];
    };
    RsDataGetMyPostsResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetMyPostsResponseBody"];
      fail: boolean;
      success: boolean;
    };
    PointDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      content: string;
      /** Format: int64 */
      ownerId: number;
      /** Format: int32 */
      amount: number;
    };
    RsDataListPointDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["PointDto"][];
      fail: boolean;
      success: boolean;
    };
    AttendDto: {
      /** Format: date-time */
      createDate: string;
    };
    RsDataListAttendDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["AttendDto"][];
      fail: boolean;
      success: boolean;
    };
    RsDataBoolean: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: boolean;
      fail: boolean;
      success: boolean;
    };
    MyPageDto: {
      learningCourses?: components["schemas"]["CourseDto"][];
      favoriteCourses?: components["schemas"]["CourseDto"][];
      member?: components["schemas"]["MemberDto"];
    };
    MyPageResponseBody: {
      item: components["schemas"]["MyPageDto"];
    };
    RsDataMyPageResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["MyPageResponseBody"];
      fail: boolean;
      success: boolean;
    };
    RsDataMemberDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["MemberDto"];
      fail: boolean;
      success: boolean;
    };
    MeResponseBody: {
      item: components["schemas"]["MemberDto"];
    };
    RsDataMeResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["MeResponseBody"];
      fail: boolean;
      success: boolean;
    };
    RsDataIsLoginResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["isLoginResponseBody"];
      fail: boolean;
      success: boolean;
    };
    isLoginResponseBody: {
      isLogin: boolean;
    };
    RsDataIsAdminResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["isAdminResponseBody"];
      fail: boolean;
      success: boolean;
    };
    isAdminResponseBody: {
      isAdmin: boolean;
    };
    CourseEnrollDto: {
      /** Format: int64 */
      courseId?: number;
      title?: string;
      imgUrl?: string;
      /** Format: int32 */
      price?: number;
    };
    GetCourseEnrollResponsebody: {
      items: components["schemas"]["CourseEnrollDto"][];
    };
    RsDataGetCourseEnrollResponsebody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetCourseEnrollResponsebody"];
      fail: boolean;
      success: boolean;
    };
    GetCoursesResponsebody: {
      items: components["schemas"]["CourseDto"][];
    };
    RsDataGetCoursesResponsebody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetCoursesResponsebody"];
      fail: boolean;
      success: boolean;
    };
    GetSummaryNoteResponsebody: {
      items: components["schemas"]["SummaryNoteDto"][];
    };
    RsDataGetSummaryNoteResponsebody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetSummaryNoteResponsebody"];
      fail: boolean;
      success: boolean;
    };
    RsDataListVideoDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["VideoDto"][];
      fail: boolean;
      success: boolean;
    };
    AdminCourseEnrollDto: {
      /** Format: int64 */
      id?: number;
      name?: string;
    };
    RsDataListAdminCourseEnrollDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["AdminCourseEnrollDto"][];
      fail: boolean;
      success: boolean;
    };
    CourseAuthDto: {
      enroll?: boolean;
    };
    RsDataCourseAuthDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CourseAuthDto"];
      fail: boolean;
      success: boolean;
    };
    GetSummaryandMemberNoteResponsebody: {
      items: components["schemas"]["SummaryNoteDto"][];
      member: components["schemas"]["Member"];
    };
    RsDataGetSummaryandMemberNoteResponsebody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetSummaryandMemberNoteResponsebody"];
      fail: boolean;
      success: boolean;
    };
    RsDataListSummaryNoteDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["SummaryNoteDto"][];
      fail: boolean;
      success: boolean;
    };
    RsDataListCommentDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CommentDto"][];
      fail: boolean;
      success: boolean;
    };
    GetCommentResponseBody: {
      itemPage: components["schemas"]["PageDtoCommentDto"];
    };
    PageDtoCommentDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["CommentDto"][];
    };
    RsDataGetCommentResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetCommentResponseBody"];
      fail: boolean;
      success: boolean;
    };
    AdminSummaryNoteDto: {
      /** Format: int64 */
      id: number;
      name: string;
      courseName: string;
      /** Format: int64 */
      videoId: number;
      /** Format: int64 */
      courseId: number;
      /** Format: date-time */
      createDate: string;
      pass: boolean;
    };
    RsDataListAdminSummaryNoteDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["AdminSummaryNoteDto"][];
      fail: boolean;
      success: boolean;
    };
    GetNotesResponseBody: {
      itemPage?: components["schemas"]["PageDtoAdminSummaryNoteDto"];
    };
    PageDtoAdminSummaryNoteDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["AdminSummaryNoteDto"][];
    };
    RsDataGetNotesResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetNotesResponseBody"];
      fail: boolean;
      success: boolean;
    };
    ReportedPostDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: int64 */
      authorId: number;
      authorName: string;
      title: string;
    };
    RsDataListReportedPostDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["ReportedPostDto"][];
      fail: boolean;
      success: boolean;
    };
    AdminQnaDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      authorName: string;
      title: string;
      /** Format: int32 */
      commentCount: number;
    };
    RsDataListAdminQnaDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["AdminQnaDto"][];
      fail: boolean;
      success: boolean;
    };
    GetAdmQnaResponseBody: {
      itemPage?: components["schemas"]["PageDtoAdminQnaDto"];
    };
    PageDtoAdminQnaDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["AdminQnaDto"][];
    };
    RsDataGetAdmQnaResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetAdmQnaResponseBody"];
      fail: boolean;
      success: boolean;
    };
    AdminMemberDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      name: string;
      report: boolean;
    };
    RsDataListAdminMemberDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["AdminMemberDto"][];
      fail: boolean;
      success: boolean;
    };
    GetMembersResponseBody: {
      itemPage?: components["schemas"]["PageDtoAdminMemberDto"];
    };
    PageDtoAdminMemberDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["AdminMemberDto"][];
    };
    RsDataGetMembersResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetMembersResponseBody"];
      fail: boolean;
      success: boolean;
    };
    RsDataGetDeviceResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["getDeviceResponseBody"];
      fail: boolean;
      success: boolean;
    };
    getDeviceResponseBody: {
      isMobile?: boolean;
    };
    AdminCourseDto: {
      /** Format: int64 */
      id: number;
      title: string;
      grade: string;
      /** Format: int32 */
      enrollCount: number;
    };
    RsDataListAdminCourseDto: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["AdminCourseDto"][];
      fail: boolean;
      success: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** 로드맵에 강좌 추가 */
  addCourse: {
    parameters: {
      path: {
        roadmapId: number;
        courseId: number;
        courseOrder: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 로드맵 수정 */
  modifyRoadmap: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoadmapDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataRoadmapDto"];
        };
      };
    };
  };
  /** 로드맵 삭제 */
  deleteCourse: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 로드맵 순서 변경 */
  changeRoadmapNum: {
    parameters: {
      path: {
        roadmapId: number;
        courseId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NumDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 글 상세 정보 */
  getDetail: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataPostDto"];
        };
      };
    };
  };
  /** 글 수정 */
  modify: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataPostDto"];
        };
      };
    };
  };
  /** 글 삭제 */
  delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  readNotification: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataGetNotificationResponseBody"];
        };
      };
    };
  };
  /** 수동 출석체크 */
  visit: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 회원 닉네임 변경 */
  modifyNickName: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NickNameDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataNickNameDto"];
        };
      };
    };
  };
  /** 회원 탈퇴 */
  drop: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 강의 요약 노트 상세 보기 */
  getSummaryNote: {
    parameters: {
      path: {
        noteId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataSummaryNoteDto"];
        };
      };
    };
  };
  /** 강의 요약 노트 수정 */
  modify_1: {
    parameters: {
      path: {
        noteId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSummaryNoteDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataSummaryNoteDto"];
        };
      };
    };
  };
  /** 강의 요약 노트 삭제 */
  delete_1: {
    parameters: {
      path: {
        noteId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 강좌 수정 */
  modifyCourse: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCourseDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCourseDto"];
        };
      };
    };
  };
  /** 강의 수정 */
  modifyVideo: {
    parameters: {
      path: {
        courseId: number;
        writer_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VideoDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVideoDto"];
        };
      };
    };
  };
  /** 강의 삭제 */
  deleteVideo: {
    parameters: {
      path: {
        courseId: number;
        id: number;
        writer_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 강좌 공개 or 비공개 */
  startOrStopCourse: {
    parameters: {
      path: {
        courseId: number;
        writer_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCourseDto"];
        };
      };
    };
  };
  /** 댓글 수정 */
  modifyComment: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCommentDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCommentDto"];
        };
      };
    };
  };
  /** 댓글 삭제 */
  deleteComment: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 로드맵 생성 */
  createRoadmap: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoadmapDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreateRoadmapDto"];
        };
      };
    };
  };
  /** 글 신고 생성 */
  createPostReport: {
    parameters: {
      path: {
        postId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReportDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreateReportDto"];
        };
      };
    };
  };
  /** 강좌 신고 생성 */
  createCourseReport: {
    parameters: {
      path: {
        courseId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReportDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreateReportDto"];
        };
      };
    };
  };
  /** 글 다건 조회 */
  getPosts: {
    parameters: {
      query?: {
        page?: number;
        kw?: string;
        kwType?: "ALL" | "TITLE" | "BODY" | "NAME";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetPostsResponseBody"];
        };
      };
    };
  };
  /** 글 등록 */
  createPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePostDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreatePostDto"];
        };
      };
    };
  };
  /** 글 추천 */
  vote: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 글 추천 취소 */
  deleteVote: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 1대1 문의 목록 */
  getMyQna: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetQnaResponseBody"];
        };
      };
    };
  };
  /** 1대1 문의 등록 */
  createQna: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePostDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreatePostDto"];
        };
      };
    };
  };
  logout: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 로그인, accessToken, refreshToken 쿠키 생성됨 */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataLoginResponseBody"];
        };
      };
    };
  };
  /** 수강 등록 */
  create: {
    parameters: {
      path: {
        courseId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 강의 요약 노트 등록 */
  create_1: {
    parameters: {
      path: {
        videoId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSummaryNoteDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataSummaryNoteDto"];
        };
      };
    };
  };
  /** 강좌 좋아요 */
  vote_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 강좌 좋아요 취소 */
  deleteVote_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 강의 등록 */
  createVideo: {
    parameters: {
      path: {
        courseId: number;
        writer_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVideoDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreateVideoDto"];
        };
      };
    };
  };
  /** 강좌 등록 */
  createCourse: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCourseDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreateCourseDto"];
        };
      };
    };
  };
  /** 댓글 등록 */
  createComment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCommentDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreateCommentDto"];
        };
      };
    };
  };
  /** 댓글 추천 */
  voteComment: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 댓글 추천 취소 */
  deleteVoteComment: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 신고하기 */
  report: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  /** 게시물 신고 취소 */
  cancelReport: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 로드맵 다건 조회 */
  getRoadmaps: {
    parameters: {
      query?: {
        page?: number;
        kw?: string;
        kwType?: "ALL" | "TITLE" | "HASHTAGS" | "NAME";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetRoadmapsResponsebody"];
        };
      };
    };
  };
  /** 로드맵 아이디로 로드맵 단건 조회 */
  getRoadmapById: {
    parameters: {
      path: {
        roadmapId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataRoadmapDto"];
        };
      };
    };
  };
  /** 내가 등록한 로드맵 다건 조회 */
  getMyRoadmaps: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListRoadmapDto"];
        };
      };
    };
  };
  /** 강좌로 로드맵 목록 조회 */
  getRoadmapByCourse: {
    parameters: {
      path: {
        courseId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListRoadmapDto"];
        };
      };
    };
  };
  /** 글 신고 목록 조회 */
  reportedPostList: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetReportList"];
        };
      };
    };
  };
  /** 강좌 신고 목록 조회 */
  reportedCourseList: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetReportList"];
        };
      };
    };
  };
  /** 전체 신고 목록 조회 */
  reportedAllList: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetReportList"];
        };
      };
    };
  };
  /** 1대1 문의 상세 정보 */
  getQnaDetail: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataQnaDto"];
        };
      };
    };
  };
  /** 1대1 문의 삭제 */
  deleteQna: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 내 글 목록 */
  getMyPosts: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetMyPostsResponseBody"];
        };
      };
    };
  };
  /** 포인트 목록 */
  getPoints: {
    parameters: {
      path: {
        memberId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListPointDto"];
        };
      };
    };
  };
  /** 출석 체크 목록 */
  getAttend: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListAttendDto"];
        };
      };
    };
  };
  isAlarm: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataBoolean"];
        };
      };
    };
  };
  getNotification: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataGetNotificationResponseBody"];
        };
      };
    };
  };
  /** 마이 페이지 데이터 요청 */
  myPage: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataMyPageResponseBody"];
        };
      };
    };
  };
  getMember: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataMemberDto"];
        };
      };
    };
  };
  getMe: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataMeResponseBody"];
        };
      };
    };
  };
  /** 로그인 여부 확인 */
  isLogin: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataIsLoginResponseBody"];
        };
      };
    };
  };
  /** 관리자 여부 확인 */
  isAdmin: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataIsAdminResponseBody"];
        };
      };
    };
  };
  /** 홈화면 최신 강좌 N개조회 */
  getPosts_1: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "*/*": components["schemas"]["RsDataGetPostsResponseBody"];
        };
      };
    };
  };
  /** 수업 목록 조회 */
  getEnrollList: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetCourseEnrollResponsebody"];
        };
      };
    };
  };
  /** 강좌 다건 조회 */
  getCourses: {
    parameters: {
      query?: {
        page?: number;
        kw?: string;
        kwType?: "ALL" | "TITLE" | "HASHTAGS" | "NAME";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetCoursesResponsebody"];
        };
      };
    };
  };
  /** 비디오별 강의노트 조회(관리자 기능) */
  getSummaryNoteAdmin: {
    parameters: {
      query?: {
        page?: number;
      };
      path: {
        videoId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetSummaryNoteResponsebody"];
        };
      };
    };
  };
  /** 강좌 상세 조회 */
  getCourse: {
    parameters: {
      path: {
        courseId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCourseDto"];
        };
      };
    };
  };
  /** 강의 리스트 */
  getVideos: {
    parameters: {
      path: {
        courseId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListVideoDto"];
        };
      };
    };
  };
  /** 특정 강의 */
  getVideos_1: {
    parameters: {
      path: {
        courseId: number;
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataVideoDto"];
        };
      };
    };
  };
  /** 강좌별 수강생 목록 */
  getEnrollByCourseId: {
    parameters: {
      path: {
        courseId: number;
        writerId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListAdminCourseEnrollDto"];
        };
      };
    };
  };
  /** 해당 멤버가 해당 강좌를 수강 중인지 */
  getCourseAuth: {
    parameters: {
      path: {
        courseId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCourseAuthDto"];
        };
      };
    };
  };
  /** 작성자별(uuid) 강의 요약노트 조회 */
  getSummaryNoteByUUID: {
    parameters: {
      query: {
        uuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetSummaryandMemberNoteResponsebody"];
        };
      };
    };
  };
  /** 작성자별 강의 요약노트 조회 */
  getSummaryNoteByWriter: {
    parameters: {
      path: {
        writerId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListSummaryNoteDto"];
        };
      };
    };
  };
  /** 작성자별 강좌의 모든 요약노트 목록 조회 */
  getSummaryNoteByWriterandCourse: {
    parameters: {
      path: {
        writerId: number;
        courseId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListSummaryNoteDto"];
        };
      };
    };
  };
  /** 내가 등록한 강좌 조회 */
  getMyCourse: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetCoursesResponsebody"];
        };
      };
    };
  };
  /** 댓글 목록 */
  getComments: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListCommentDto"];
        };
      };
    };
  };
  /** 추천수 탑2 댓글 */
  getTopComments: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListCommentDto"];
        };
      };
    };
  };
  /** 내 댓글 목록 */
  getComments_1: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetCommentResponseBody"];
        };
      };
    };
  };
  /** 최신 요약노트 */
  getSummeryNotes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListAdminSummaryNoteDto"];
        };
      };
    };
  };
  /** 요약노트 목록 */
  getAllSummeryNotes: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetNotesResponseBody"];
        };
      };
    };
  };
  /** 신고 게시물 최신순 */
  getReportedPosts: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListReportedPostDto"];
        };
      };
    };
  };
  /** 신고 게시물 목록 */
  getAllReportedPosts: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListReportedPostDto"];
        };
      };
    };
  };
  /** 최신 문의 */
  getQna: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListAdminQnaDto"];
        };
      };
    };
  };
  /** 1대1 문의 목록 */
  getAllQna: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetAdmQnaResponseBody"];
        };
      };
    };
  };
  /** 회원 최신순 */
  getMembers: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListAdminMemberDto"];
        };
      };
    };
  };
  /** 회원 목록 */
  getAllMembers: {
    parameters: {
      query?: {
        page?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetMembersResponseBody"];
        };
      };
    };
  };
  getDevice: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetDeviceResponseBody"];
        };
      };
    };
  };
  /** 강좌 최신순 */
  getRecentCourses: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataListAdminCourseDto"];
        };
      };
    };
  };
  /** 특정 강좌를 어떤 로드맵에서 삭제 by 각 id */
  CourseRoadmapDelete: {
    parameters: {
      path: {
        roadmapId: number;
        courseId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 특정 강좌를 어떤 로드맵에서 삭제 by courseRoadmap id */
  courseRoadmapDelete: {
    parameters: {
      path: {
        courseRoadmapId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 강좌 삭제 */
  deleteCourse_1: {
    parameters: {
      path: {
        id: number;
        writer_id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
}
